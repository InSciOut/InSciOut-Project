# alternative way, using dplyr:
# d125 <- left_join(news_table, PR_table, by='Reference')
# display the first 10 rows
kable(head(d125, 10) )
setnames(JA_table,
old = c('Design_Actual'),
new = c('JA_Design'))
# note that we do the merge operation on the d125 now:
d125 <- merge(x = d125, y = JA_table, by='Reference', all.x = TRUE)
# display
kable(head(d125, 10))
ifelse(c(1, -3, -3, 1, -3) > 0, 'yes', 'no')
isNewsGreater <- d125$News_Advice_Code > d125$PR_Advice_Code
d125$News_Exageration = ifelse(isNewsGreater, 1, -1)
isNewsEqual = d125$News_Advice_Code == d125$PR_Advice_Code
d125[isNewsEqual, 'News_Exageration'] <- 0
# you could also write it:
# results_table$News_Exageration[isNewsEqual] <- 0
# display the first 10 rows:
kable(head(d125, 10))
d100 <- read.csv("./d100.csv") # I made the analysis before hand :)
sub.d100 <- d100 %>%
select(Reference, PR_Exageration)
d125 <- left_join(x = d125, y = sub.d100, by='Reference')
# display only the first news of each Reference, so it is easier to check
kable(d125 %>% group_by(Reference) %>% filter(row_number() == 1))
###
db <- dbConnect(RSQLite::SQLite(), dbname = "../database/InSciOut.db")
news_table <- dbGetQuery(db, "SELECT Reference FROM News_table")
JA_table <- dbGetQuery(db, "SELECT Reference, Source, Design_Actual, Sample_Actual, Sample_Code FROM JA_table")
PR_table <- dbGetQuery(db, "SELECT Reference, Sample_Code FROM PR_table")
Meta_table <- dbGetQuery(db, "SELECT Reference, Sample FROM Meta_table")
kable(JA_table[JA_table$Reference == 'test-03-15-048',])
### Note that %>% is the syntax that dplyr uses to pipe/chain operations:
JA_table <- JA_table %>%
group_by(Reference) %>%
mutate(Sample_Code = min(Sample_Code)) # we override the column Sample_Code with its minimum
kable(JA_table[JA_table$Reference == 'test-03-15-048',])
# with dplyr's syntax:
JA_table <- JA_table %>%
filter(Source == 'Journal Article - Body')
# with R base's syntax
# JA_table = df[df$Source == 'Journal Article - Body',]
kable(JA_table[JA_table$Reference == 'test-03-15-048',])
### Create a Table that Crosses Information between JA, PR and News tables ----
# merge the PR Table to the News table
setnames(JA_table,
old = c('Sample_Code'),
new = c('JA_Sample_Code'))
setnames(PR_table,
old = c('Sample_Code'),
new = c('PR_Sample_Code'))
d100 <- merge(x = PR_table, y = JA_table, by='Reference')
d100 <- merge(x = d100, y = Meta_table, by='Reference')
d100 <- select(d100, -Source) # remove the column 'Source'
# note that you could also write:
# d100 <- d100 %>% select(-Source)
kable(d100[1:5,])
setDT(d100) # we make it a Data.Table, allows to go faster and write less
d100 <-
d100[(PR_Sample_Code %in% c(1,2)) & (JA_Sample_Code == 1), PR_Exageration:= 0 ]
d100 <-
d100[(PR_Sample_Code %in% c(1,2)) & (JA_Sample_Code == 3), PR_Exageration:= 1 ]
d100 <-
d100[(PR_Sample_Code == 3) & (JA_Sample_Code == 3), PR_Exageration:= 0 ]
d100 <-
d100[(PR_Sample_Code == 3) & (JA_Sample_Code == 1), PR_Exageration:= -1 ]
d100 <-
d100[(PR_Sample_Code == 4), PR_Exageration:= -99 ]
# use
# setDF(d100) # to come back to a Data.Frame (if needed)
# without the setDT(d100), you would need to write:
# d100$PR_Exageration[(d100$PR_Sample_Code %in% c(1,2)) & (d100$JA_Sample_Code == 1) ] = 0
# display (we need to add with=FALSE because we used a data.table)
kable(head(d100 %>% select(PR_Sample_Code, JA_Sample_Code, PR_Exageration), 10))
news_table <- news_table %>%
group_by(Reference) %>%
mutate(News_Uptake = 'yes', Total_News= n()) %>%
filter(row_number()==1)
d100 <- left_join(d100, news_table, by='Reference')
d100$News_Uptake[is.na(d100$News_Uptake)] <- 'no' # note that NA can only be detected with is.na()
d100$Total_News[is.na(d100$Total_News)] <- 0
kable(head(d100, 10))
dbDisconnect(db)
unlink("../database/InSciOut.db")
d100 <- read.csv("./d100.csv") # I made the analysis before hand :)
sub.d100 <- d100 %>%
select(Reference, PR_Exageration)
sub.d100
left_join(x = d125, y = sub.d100, by='Reference')
left_join(x = d125, y = sub.d100, by='Reference')
d125
sub.d100
read.csv("./d100.csv", stringsAsFactors = FALSE)
d100 <- read.csv("./d100.csv", stringsAsFactors = FALSE) # I made the analysis before hand :)
sub.d100 <- d100 %>%
select(Reference, PR_Exageration)
d125 <- left_join(x = d125, y = sub.d100, by='Reference')
d125
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(knitr) # just to display pretty tables in Rmarkdown
library(DBI) # to open connection with SQL database
db <- dbConnect(RSQLite::SQLite(), dbname = "../database/InSciOut.db")
kable(dbGetQuery(db, "SELECT * FROM Meta_table LIMIT 1"))
meta.table <- dbGetQuery(db, "SELECT * FROM Meta_table")
dbDisconnect(db)
unlink("../database/InSciOut.db")
db <- dbConnect(RSQLite::SQLite(), dbname = "../database/InSciOut.db")
news_table <- dbGetQuery(db, "SELECT Reference, Source, Advice_Code FROM News_table")
JA_table <- dbGetQuery(db, "SELECT Reference, Design_Actual FROM JABody_table")
PR_table <- dbGetQuery(db, "SELECT Reference, Advice_Code, Advice Sample_Code FROM PR_table")
Meta_table <- dbGetQuery(db, "SELECT Reference, Sample FROM Meta_table")
# Display the results:
kable(head(news_table, 5))
kable(head(PR_table, 5))
kable(head(JA_table, 5))
# setnames is a function from dtplyr (or data.table)
setnames(news_table,
old = c('Advice_Code','Source'),
new = c('News_Advice_Code','News_Source'))
setnames(PR_table,
old = c('Advice_Code'),
new = c('PR_Advice_Code'))
# display
kable(head(news_table, 1))
kable(head(PR_table, 1))
# using the data.table library:
d125 <- merge(x = news_table, y = PR_table, by='Reference', all.x = TRUE)
# alternative way, using dplyr:
# d125 <- left_join(news_table, PR_table, by='Reference')
# display the first 10 rows
kable(head(d125, 10) )
setnames(JA_table,
old = c('Design_Actual'),
new = c('JA_Design'))
# note that we do the merge operation on the d125 now:
d125 <- merge(x = d125, y = JA_table, by='Reference', all.x = TRUE)
# display
kable(head(d125, 10))
ifelse(c(1, -3, -3, 1, -3) > 0, 'yes', 'no')
isNewsGreater <- d125$News_Advice_Code > d125$PR_Advice_Code
d125$News_Exageration = ifelse(isNewsGreater, 1, -1)
isNewsEqual = d125$News_Advice_Code == d125$PR_Advice_Code
d125[isNewsEqual, 'News_Exageration'] <- 0
# you could also write it:
# results_table$News_Exageration[isNewsEqual] <- 0
# display the first 10 rows:
kable(head(d125, 10))
d100 <- read.csv("./d100.csv", stringsAsFactors = FALSE) # I made the analysis before hand :)
sub.d100 <- d100 %>%
select(Reference, PR_Exageration)
d125 <- left_join(x = d125, y = sub.d100, by='Reference')
# display only the first news of each Reference, so it is easier to check
kable(d125 %>% group_by(Reference) %>% filter(row_number() == 1))
###
db <- dbConnect(RSQLite::SQLite(), dbname = "../database/InSciOut.db")
news_table <- dbGetQuery(db, "SELECT Reference FROM News_table")
JA_table <- dbGetQuery(db, "SELECT Reference, Source, Design_Actual, Sample_Actual, Sample_Code FROM JA_table")
PR_table <- dbGetQuery(db, "SELECT Reference, Sample_Code FROM PR_table")
Meta_table <- dbGetQuery(db, "SELECT Reference, Sample FROM Meta_table")
kable(JA_table[JA_table$Reference == 'test-03-15-048',])
### Note that %>% is the syntax that dplyr uses to pipe/chain operations:
JA_table <- JA_table %>%
group_by(Reference) %>%
mutate(Sample_Code = min(Sample_Code)) # we override the column Sample_Code with its minimum
kable(JA_table[JA_table$Reference == 'test-03-15-048',])
# with dplyr's syntax:
JA_table <- JA_table %>%
filter(Source == 'Journal Article - Body')
# with R base's syntax
# JA_table = df[df$Source == 'Journal Article - Body',]
kable(JA_table[JA_table$Reference == 'test-03-15-048',])
### Create a Table that Crosses Information between JA, PR and News tables ----
# merge the PR Table to the News table
setnames(JA_table,
old = c('Sample_Code'),
new = c('JA_Sample_Code'))
setnames(PR_table,
old = c('Sample_Code'),
new = c('PR_Sample_Code'))
d100 <- merge(x = PR_table, y = JA_table, by='Reference')
d100 <- merge(x = d100, y = Meta_table, by='Reference')
d100 <- select(d100, -Source) # remove the column 'Source'
# note that you could also write:
# d100 <- d100 %>% select(-Source)
kable(d100[1:5,])
setDT(d100) # we make it a Data.Table, allows to go faster and write less
d100 <-
d100[(PR_Sample_Code %in% c(1,2)) & (JA_Sample_Code == 1), PR_Exageration:= 0 ]
d100 <-
d100[(PR_Sample_Code %in% c(1,2)) & (JA_Sample_Code == 3), PR_Exageration:= 1 ]
d100 <-
d100[(PR_Sample_Code == 3) & (JA_Sample_Code == 3), PR_Exageration:= 0 ]
d100 <-
d100[(PR_Sample_Code == 3) & (JA_Sample_Code == 1), PR_Exageration:= -1 ]
d100 <-
d100[(PR_Sample_Code == 4), PR_Exageration:= -99 ]
# use
# setDF(d100) # to come back to a Data.Frame (if needed)
# without the setDT(d100), you would need to write:
# d100$PR_Exageration[(d100$PR_Sample_Code %in% c(1,2)) & (d100$JA_Sample_Code == 1) ] = 0
# display (we need to add with=FALSE because we used a data.table)
kable(head(d100 %>% select(PR_Sample_Code, JA_Sample_Code, PR_Exageration), 10))
news_table <- news_table %>%
group_by(Reference) %>%
mutate(News_Uptake = 'yes', Total_News= n()) %>%
filter(row_number()==1)
d100 <- left_join(d100, news_table, by='Reference')
d100$News_Uptake[is.na(d100$News_Uptake)] <- 'no' # note that NA can only be detected with is.na()
d100$Total_News[is.na(d100$Total_News)] <- 0
kable(head(d100, 10))
dbDisconnect(db)
unlink("../database/InSciOut.db")
d125
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(knitr) # just to display pretty tables in Rmarkdown
library(DBI) # to open connection with SQL database
db <- dbConnect(RSQLite::SQLite(), dbname = "../database/InSciOut.db")
kable(dbGetQuery(db, "SELECT * FROM Meta_table LIMIT 1"))
meta.table <- dbGetQuery(db, "SELECT * FROM Meta_table")
dbDisconnect(db)
unlink("../database/InSciOut.db")
db <- dbConnect(RSQLite::SQLite(), dbname = "../database/InSciOut.db")
news_table <- dbGetQuery(db, "SELECT Reference, Source, Advice_Code FROM News_table")
JA_table <- dbGetQuery(db, "SELECT Reference, Design_Actual FROM JABody_table")
PR_table <- dbGetQuery(db, "SELECT Reference, Advice_Code, Advice Sample_Code FROM PR_table")
Meta_table <- dbGetQuery(db, "SELECT Reference, Sample FROM Meta_table")
# Display the results:
kable(head(news_table, 5))
kable(head(PR_table, 5))
kable(head(JA_table, 5))
# setnames is a function from dtplyr (or data.table)
setnames(news_table,
old = c('Advice_Code','Source'),
new = c('News_Advice_Code','News_Source'))
setnames(PR_table,
old = c('Advice_Code'),
new = c('PR_Advice_Code'))
# display
kable(head(news_table, 1))
kable(head(PR_table, 1))
# using the data.table library:
d125 <- merge(x = news_table, y = PR_table, by='Reference', all.x = TRUE)
# alternative way, using dplyr:
# d125 <- left_join(news_table, PR_table, by='Reference')
# display the first 10 rows
kable(head(d125, 10) )
setnames(JA_table,
old = c('Design_Actual'),
new = c('JA_Design'))
# note that we do the merge operation on the d125 now:
d125 <- merge(x = d125, y = JA_table, by='Reference', all.x = TRUE)
# display
kable(head(d125, 10))
ifelse(c(1, -3, -3, 1, -3) > 0, 'yes', 'no')
isNewsGreater <- d125$News_Advice_Code > d125$PR_Advice_Code
d125$News_Exageration = ifelse(isNewsGreater, 1, -1)
isNewsEqual = d125$News_Advice_Code == d125$PR_Advice_Code
d125[isNewsEqual, 'News_Exageration'] <- 0
# you could also write it:
# results_table$News_Exageration[isNewsEqual] <- 0
# display the first 10 rows:
kable(head(d125, 10))
d100 <- read.csv("./d100.csv", stringsAsFactors = FALSE) # I made the analysis before hand :)
sub.d100 <- d100 %>%
select(Reference, PR_Exageration)
sub.d100$Reference %in% d125$Reference
overlap <- sub.d100$Reference %in% d125$Reference
sub.d100$Reference[overlap,:]
sub.d100$Reference[overlap,]
sub.d100$Reference[overlap]
overlap2 <- d125$Reference %in% sub.d100$Reference
sub.d100$PR_Exageration[overlap]
left_join(x = d125, y = sub.d100, by='Reference')
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(knitr) # just to display pretty tables in Rmarkdown
library(DBI) # to open connection with SQL database
db <- dbConnect(RSQLite::SQLite(), dbname = "../database/InSciOut.db")
kable(dbGetQuery(db, "SELECT * FROM Meta_table LIMIT 1"))
meta.table <- dbGetQuery(db, "SELECT * FROM Meta_table")
dbDisconnect(db)
unlink("../database/InSciOut.db")
db <- dbConnect(RSQLite::SQLite(), dbname = "../database/InSciOut.db")
news_table <- dbGetQuery(db, "SELECT Reference, Source, Advice_Code FROM News_table")
JA_table <- dbGetQuery(db, "SELECT Reference, Design_Actual FROM JABody_table")
PR_table <- dbGetQuery(db, "SELECT Reference, Advice_Code, Advice Sample_Code FROM PR_table")
Meta_table <- dbGetQuery(db, "SELECT Reference, Sample FROM Meta_table")
# Display the results:
kable(head(news_table, 5))
kable(head(PR_table, 5))
kable(head(JA_table, 5))
# setnames is a function from dtplyr (or data.table)
setnames(news_table,
old = c('Advice_Code','Source'),
new = c('News_Advice_Code','News_Source'))
setnames(PR_table,
old = c('Advice_Code'),
new = c('PR_Advice_Code'))
# display
kable(head(news_table, 1))
kable(head(PR_table, 1))
# using the data.table library:
d125 <- merge(x = news_table, y = PR_table, by='Reference', all.x = TRUE)
# alternative way, using dplyr:
# d125 <- left_join(news_table, PR_table, by='Reference')
# display the first 10 rows
kable(head(d125, 10) )
setnames(JA_table,
old = c('Design_Actual'),
new = c('JA_Design'))
# note that we do the merge operation on the d125 now:
d125 <- merge(x = d125, y = JA_table, by='Reference', all.x = TRUE)
# display
kable(head(d125, 10))
ifelse(c(1, -3, -3, 1, -3) > 0, 'yes', 'no')
isNewsGreater <- d125$News_Advice_Code > d125$PR_Advice_Code
d125$News_Exageration = ifelse(isNewsGreater, 1, -1)
isNewsEqual = d125$News_Advice_Code == d125$PR_Advice_Code
d125[isNewsEqual, 'News_Exageration'] <- 0
# you could also write it:
# results_table$News_Exageration[isNewsEqual] <- 0
# display the first 10 rows:
kable(head(d125, 10))
d100 <- read.csv("./d100.csv", stringsAsFactors = FALSE) # I made the analysis before hand :)
sub.d100 <- d100 %>%
select(Reference, PR_Exageration)
buffer <- left_join(x = d125, y = sub.d100, by='Reference')
buffer %>% group_by(Reference) %>% filter(row_number() == 1)
quick <- buffer %>% group_by(Reference) %>% filter(row_number() == 1)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(knitr) # just to display pretty tables in Rmarkdown
library(DBI) # to open connection with SQL database
db <- dbConnect(RSQLite::SQLite(), dbname = "../database/InSciOut.db")
kable(dbGetQuery(db, "SELECT * FROM Meta_table LIMIT 1"))
meta.table <- dbGetQuery(db, "SELECT * FROM Meta_table")
dbDisconnect(db)
unlink("../database/InSciOut.db")
db <- dbConnect(RSQLite::SQLite(), dbname = "../database/InSciOut.db")
news_table <- dbGetQuery(db, "SELECT Reference, Source, Advice_Code FROM News_table")
JA_table <- dbGetQuery(db, "SELECT Reference, Design_Actual FROM JABody_table")
PR_table <- dbGetQuery(db, "SELECT Reference, Advice_Code, Advice Sample_Code FROM PR_table")
Meta_table <- dbGetQuery(db, "SELECT Reference, Sample FROM Meta_table")
# Display the results:
kable(head(news_table, 5))
kable(head(PR_table, 5))
kable(head(JA_table, 5))
# setnames is a function from dtplyr (or data.table)
setnames(news_table,
old = c('Advice_Code','Source'),
new = c('News_Advice_Code','News_Source'))
setnames(PR_table,
old = c('Advice_Code'),
new = c('PR_Advice_Code'))
# display
kable(head(news_table, 1))
kable(head(PR_table, 1))
# using the data.table library:
d125 <- merge(x = news_table, y = PR_table, by='Reference', all.x = TRUE)
# alternative way, using dplyr:
# d125 <- left_join(news_table, PR_table, by='Reference')
# display the first 10 rows
kable(head(d125, 10) )
setnames(JA_table,
old = c('Design_Actual'),
new = c('JA_Design'))
# note that we do the merge operation on the d125 now:
d125 <- merge(x = d125, y = JA_table, by='Reference', all.x = TRUE)
# display
kable(head(d125, 10))
ifelse(c(1, -3, -3, 1, -3) > 0, 'yes', 'no')
isNewsGreater <- d125$News_Advice_Code > d125$PR_Advice_Code
d125$News_Exageration = ifelse(isNewsGreater, 1, -1)
isNewsEqual = d125$News_Advice_Code == d125$PR_Advice_Code
d125[isNewsEqual, 'News_Exageration'] <- 0
# you could also write it:
# results_table$News_Exageration[isNewsEqual] <- 0
# display the first 10 rows:
kable(head(d125, 10))
d100 <- read.csv("./d100.csv", stringsAsFactors = FALSE) # I made the analysis before hand :)
sub.d100 <- d100 %>%
select(Reference, PR_Exageration)
buffer <- left_join(x = d125, y = sub.d100, by='Reference')
#d125 <- buffer
# display only the first news of each Reference, so it is easier to check
# kable(d125 %>% group_by(Reference) %>% filter(row_number() == 1))
kable(buffer %>% group_by(Reference) %>% filter(row_number() == 1))
d100 <- read.csv("./d100.csv", stringsAsFactors = FALSE) # I made the analysis before hand :)
sub.d100 <- d100 %>%
select(Reference, PR_Exageration)
# buffer <- left_join(x = d125, y = sub.d100, by='Reference')
buffer <- merge(x = d125, y = sub.d100, by='Reference', all.x = TRUE)
#d125 <- buffer
# display only the first news of each Reference, so it is easier to check
# kable(d125 %>% group_by(Reference) %>% filter(row_number() == 1))
kable(buffer %>% group_by(Reference) %>% filter(row_number() == 1))
View(sub.d100)
View(d100)
library(dplyr)
library(data.table)
### --- Analysis at row 100 in DataAnalasis.xls ----
db <- dbConnect(RSQLite::SQLite(), dbname = "../database/InSciOut.db")
news_table <- dbGetQuery(db, "SELECT Reference FROM News_table")
JA_table <- dbGetQuery(db, "SELECT Reference, Source, Design_Actual, Sample_Actual, Sample_Code FROM JA_table")
PR_table <- dbGetQuery(db, "SELECT Reference, Sample_Code FROM PR_table")
Meta_table <- dbGetQuery(db, "SELECT Reference, Sample FROM Meta_table")
# Select the minim between Sample_Code from Article's Title and Article's Body
JA_table <- JA_table %>% # note that both Title and Body rows are in JA_table
group_by(Reference) %>%
mutate(Sample_Code = min(Sample_Code)) # we override the column Sample_Code with its minimum
# Note that %>% is the syntax that dplyr uses to pipe/chain operations:
# remove the rows from Article's Body from JA_table with dplyr's syntax:
JA_table <- JA_table %>%
filter(Source == 'Journal Article - Body')
# merge the JA table to the PR table
setnames(JA_table,
old = c('Sample_Code'),
new = c('JA_Sample_Code'))
setnames(PR_table,
old = c('Sample_Code'),
new = c('PR_Sample_Code'))
d100 <- merge(x = PR_table, y = JA_table, by='Reference')
d100 <- select(d100, -Source) # remove the column 'Source'
# Make columns `PR_Exageration`according to rules.
setDT(d100) # we make it a Data.Table, allows to go faster and write less
d100 <- d100[(PR_Sample_Code %in% c(1,2)) & (JA_Sample_Code == 1), PR_Exageration:= 0 ]
d100 <- d100[(PR_Sample_Code %in% c(1,2)) & (JA_Sample_Code == 3), PR_Exageration:= 1 ]
d100 <- d100[(PR_Sample_Code == 3) & (JA_Sample_Code == 3), PR_Exageration:= 0 ]
d100 <- d100[(PR_Sample_Code == 3) & (JA_Sample_Code == 1), PR_Exageration:= -1 ]
d100 <- d100[(PR_Sample_Code == 4), PR_Exageration:= -99 ]
# Finally we are adding the columns with the count in new_table:
news_table <- news_table %>%
group_by(Reference) %>%
mutate(News_Uptake = 'yes', Total_News= n()) %>%
filter(row_number()==1)
# and we merge everything:
d100 <- left_join(d100, news_table, by='Reference')
d100$News_Uptake[is.na(d100$News_Uptake)] <- 'no' # note that NA can only be detected with is.na()
d100$Total_News[is.na(d100$Total_News)] <- 0
write.csv(d100, "./d100.csv")
getwd()
source('C:/Users/geoff/MyDocuments/Bitbucket/InSciOut/analyses/analysis125.R')
source('C:/Users/geoff/MyDocuments/Bitbucket/InSciOut/analyses/analysis125.R')
setwd("C:/Users/geoff/MyDocuments/Bitbucket/InSciOut/analyses")
source('C:/Users/geoff/MyDocuments/Bitbucket/InSciOut/analyses/analysis125.R')
source('C:/Users/geoff/MyDocuments/Bitbucket/InSciOut/analyses/analysis100.r')
source('C:/Users/geoff/MyDocuments/Bitbucket/InSciOut/analyses/analysis125.R')
source('C:/Users/geoff/MyDocuments/Bitbucket/InSciOut/analyses/analysis125.R')
source('C:/Users/geoff/MyDocuments/Bitbucket/InSciOut/analyses/analysis125.R')
source('C:/Users/geoff/MyDocuments/Bitbucket/InSciOut/analyses/analysis125.R')
source('C:/Users/geoff/MyDocuments/Bitbucket/InSciOut/analyses/analysis125.R')
source('C:/Users/geoff/MyDocuments/Bitbucket/InSciOut/analyses/analysis125.R')
source('C:/Users/geoff/MyDocuments/Bitbucket/InSciOut/analyses/analysis125.R')
source('C:/Users/geoff/MyDocuments/Bitbucket/InSciOut/analyses/analysis125.R')
d125
source('C:/Users/geoff/MyDocuments/Bitbucket/InSciOut/analyses/analysis125.R')
debugSource('C:/Users/geoff/MyDocuments/Bitbucket/InSciOut/analyses/analysis125.R')
sub.d100
d125
debugSource('C:/Users/geoff/MyDocuments/Bitbucket/InSciOut/analyses/analysis125.R')
source('C:/Users/geoff/MyDocuments/Bitbucket/InSciOut/analyses/analysis125.R')
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(dplyr)
library(DBI)
db <- dbConnect(RSQLite::SQLite(), dbname = "../database/InSciOut.db")
columns <- read.csv("../Column Names.csv")
kable(columns)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(knitr)
library(dplyr)
columns <- read.csv("../Column Names.csv")
kable(columns)
columns <- read.csv("../Column Names.csv")
kable(columns[1:10])
columns <- read.csv("../Column Names.csv")
kable(columns[1:10,])
columns <- read.csv("../Column Names.csv")
kable(columns[10:,])
columns <- read.csv("../Column Names.csv")
kable(columns[10:end,])
columns <- read.csv("../Column Names.csv")
kable(columns[10:-1,])
columns <- read.csv("../Column Names.csv")
kable(columns[10:length(columns),])
length(columns)
dim(columns)
dim(columns, 1)
columns <- read.csv("../Column Names.csv")
kable(columns[10:dim(columns)[1],])
columns <- read.csv("../Column Names.csv")
names(columns) <- c("Section", "Explanation (from excel)", "Column Name")
kable(columns[11:dim(columns)[1],]) # from row 11 to end of file Column Names
columns <- read.csv("../Column Names.csv")
names(columns) <- c("Section", "Explanation (from excel)", "Column Name")
kable(columns[11:dim(columns)[1],]) # from row 11 to end of file Column Names
install.packages("rmarkdown")
install.packages(c("acepack", "BH", "broom", "chron", "coda", "colorspace", "data.table", "DBI", "digest", "Hmisc", "jsonlite", "knitr", "mnormt", "mvtnorm", "nlme", "pbapply", "pbkrtest", "psych", "Rcpp", "RcppEigen", "shiny", "SparseM", "stringi", "stringr", "tidyr", "yaml"))
install.packages(c("acepack", "BH", "broom", "chron", "coda", "colorspace", "data.table", "DBI", "digest", "Hmisc", "jsonlite", "knitr", "mnormt", "mvtnorm", "nlme", "pbapply", "pbkrtest", "psych", "Rcpp", "RcppEigen", "shiny", "SparseM", "stringi", "stringr", "tidyr", "yaml"))
install.packages(c("acepack", "BH", "broom", "chron", "coda", "colorspace", "data.table", "DBI", "digest", "Hmisc", "jsonlite", "knitr", "mnormt", "mvtnorm", "nlme", "pbapply", "pbkrtest", "psych", "Rcpp", "RcppEigen", "shiny", "SparseM", "stringi", "stringr", "tidyr", "yaml"))
install.packages(c("acepack", "BH", "broom", "chron", "coda", "colorspace", "data.table", "DBI", "digest", "Hmisc", "jsonlite", "knitr", "mnormt", "mvtnorm", "nlme", "pbapply", "pbkrtest", "psych", "Rcpp", "RcppEigen", "shiny", "SparseM", "stringi", "stringr", "tidyr", "yaml"))
install.packages(c("acepack", "BH", "broom", "chron", "coda", "colorspace", "data.table", "DBI", "digest", "Hmisc", "jsonlite", "knitr", "mnormt", "mvtnorm", "nlme", "pbapply", "pbkrtest", "psych", "Rcpp", "RcppEigen", "shiny", "SparseM", "stringi", "stringr", "tidyr", "yaml"))
install.packages(c("acepack", "BH", "broom", "chron", "coda", "colorspace", "data.table", "DBI", "digest", "Hmisc", "jsonlite", "knitr", "mnormt", "mvtnorm", "nlme", "pbapply", "pbkrtest", "psych", "Rcpp", "RcppEigen", "shiny", "SparseM", "stringi", "stringr", "tidyr", "yaml"))
install.packages(c("acepack", "BH", "broom", "chron", "coda", "colorspace", "data.table", "DBI", "digest", "Hmisc", "jsonlite", "knitr", "mnormt", "mvtnorm", "nlme", "pbapply", "pbkrtest", "psych", "Rcpp", "RcppEigen", "shiny", "SparseM", "stringi", "stringr", "tidyr", "yaml"))
